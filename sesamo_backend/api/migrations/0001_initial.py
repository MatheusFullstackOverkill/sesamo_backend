# Generated by Django 3.0.2 on 2020-01-17 18:26

import api.models
from django.conf import settings
import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('profile_pic', models.ImageField(blank=True, upload_to=api.models.User.upload_path)),
                ('CPF', models.CharField(max_length=16, unique=True, verbose_name='CPF')),
                ('cellphone', models.CharField(blank=True, max_length=30, null=True, verbose_name='cellphone')),
                ('birthdate', models.DateTimeField(blank=True, null=True, verbose_name='birthdate')),
                ('usertype', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(5)], verbose_name='usertype')),
                ('sign_in_status', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(5)], verbose_name='sign in status')),
                ('sign_in_date', models.DateTimeField(blank=True, null=True)),
                ('sign_review_date', models.DateTimeField(blank=True, null=True)),
                ('sign_validation_date', models.DateTimeField(blank=True, null=True)),
                ('user_code', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(999999999)], verbose_name='user code')),
                ('access_token', models.TextField(blank=True, null=True, verbose_name='access token')),
                ('access_token_created_at', models.DateTimeField(blank=True, null=True, verbose_name='access token created at')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_trusty', models.BooleanField(default=False, help_text='Designates whether this user has confirmed his account.', verbose_name='trusty')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='FAQCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('latitudeDelta', models.FloatField()),
                ('longitudeDelta', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='Teste',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stringArr', django.contrib.postgres.fields.ArrayField(base_field=models.ImageField(blank=True, upload_to='upload_path'), size=8)),
            ],
        ),
        migrations.CreateModel(
            name='SituationalDocumentPic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=100)),
                ('document_pic', models.ImageField(blank=True, upload_to=api.models.SituationalDocumentPic.upload_document_path)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OfficialDocumentPic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(max_length=100)),
                ('document_pic', models.ImageField(blank=True, upload_to=api.models.OfficialDocumentPic.upload_document_path)),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('aunswer', models.TextField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.FAQCategory')),
            ],
        ),
    ]
